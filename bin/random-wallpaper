#!/usr/bin/env python3

# SPDX-License-Identifier: GPL-3.0-or-later

import argparse
import itertools
import json
import os
import pathlib
import random
import sys
import time

from typing import Tuple, Optional

import sh

p = argparse.ArgumentParser()
p.add_argument('folders', nargs='+', type=pathlib.Path)
p.add_argument('--duration', type=int, default=30)
p.add_argument('--initialize', action='store_true')
p.add_argument('--transform', choices=('fill', 'tile'), default='fill')
args = p.parse_args()

def get_outputs() -> dict[str, Tuple[int, int]]:
    outputs = {}
    outputs_ = str(sh.swaymsg('--type=get_outputs', '--raw'))
    for output in json.loads(outputs_):
        outputs[output['name']] = (
            output['current_mode']['width'],
            output['current_mode']['height'],
        )
    return outputs

def find_images(roots: list[pathlib.Path]):
    pics = []
    for pic in itertools.chain.from_iterable(x.glob('**/*') for x in roots):
        if pic.suffix not in ('.png', '.jpg', '.webp'):
            continue
        if not os.access(pic, os.R_OK):
            continue
        pics.append(pic)

    random.shuffle(pics)
    return pics

tmpdir = pathlib.Path(os.environ.get('XDG_RUNTIME_DIR', '/tmp')) / 'wallpaper'
tmpdir.mkdir(exist_ok=True)

pic: Optional[pathlib.Path] = None

queue = find_images(args.folders)
print('images:', len(queue))

while True:

    outputs = get_outputs()
    print('outputs:', outputs)

    if args.initialize:
        args.initialize = len(outputs) - 1

    for output, (width, height) in outputs.items():
        tmp = tmpdir / f'{output}.png'

        if pic is None:

            # refresh queue
            if not queue:
                queue = find_images(args.folders)
                print('images:', len(queue))

            pic = queue.pop()

            if args.transform == 'tile':
                sh.convert('-size', f'{width}x{height}', f'tile:{pic}', tmp)
            elif args.transform == 'fill':
                sh.resize_image(pic, tmp, width=width, height=height)

        try:
            print(output, pic)
            sh.swww.img(tmp,
                '--transition-fps=60',
                '--transition-type=random',
                '--transition-duration=1',
                f'--outputs={output}')
            pic = None
        except sh.ErrorReturnCode as e:
            print(e.stderr.decode(), file=sys.stderr)
            break # refresh outputs

        if args.initialize:
            args.initialize -= 1
            continue

        duration = args.duration / len(outputs)
        time.sleep(duration)
