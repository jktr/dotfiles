### global git config

[user]
  name = J. Konrad Tegtmeier-Rottach
  email = jktr@0x16.de
  signingKey = 0x1BDE5F6203DF5C97
  useConfigOnly = true

[commit]
#  gpgSign = true
  verbose = true

[core]
  autocrlf = input
  pager = less -x4
  whitespace = tab-in-indent

  # post-commit for stats
  hooksPath = ~/.config/git/hooks/

[blame]
  coloring = highlightRecent
  #ignoreRevsFile = .gitignorerevs

[checkout]
  defaultRemote = origin

[color "blame"]
  recent = blue,12 month ago,white,1 month ago,red

[diff]
  algorithm = minimal
  colorMoved = true
  colorMovedWS = ignore-space-change
  mnemonicPrefix = true

[fetch]
  prune = true
  parallel = 0

[init]
  defaultBranch = main

[log]
  date = iso-strict
  #showSignature = true

[merge]
  conflictStyle = zdiff3

[pull]
  rebase = interactive

[push]
  followTags = true
  gpgSign = if-asked
  recurseSubmodules = check

[rebase]
  abbreviateCommands = true
  autoStash = true

[status]
  short = true
  branch = true

[submodule]
  fetchJobs = 0
  recurse = true

[tar "tar.zst"]
  command = zstd --stdout

[transfer]
  fsckObjects = true

[alias]
  a = add
  ap = add --patch
  b = branch
  bd = branch --delete --force
  bc = checkout -B
  d = diff
  dw = diff --word-diff
  dc = diff --cached
  dcw = diff --cached --word-diff
  f = fetch --recurse-submodules
  i = commit
  ia = commit --amend --no-edit
  iae = commit --amend
  im = "!f() { git commit -m \"$*\"; }; f"
  l = log --shortstat --summary
  ls = ls-files
  o = checkout
  p = pull --autostash
  s = status
  ss = submodule status
  v = verify-commit

  wip = "!f() { git add --all; git commit --message 'wip'; }; f"
  initial = commit --message 'initial commit'

  force = push --force-with-lease

  fixup = commit --no-gpg-sign --fixup
  autosquash = "!f() { git rebase -i --autostash --autosquash "$1^"; }; f"

  contains = tag --contains

  changes = "!f() { \
    { git --no-pager log --max-count=1 --shortstat --color=always ${1:-HEAD};\
    echo; git --no-pager diff --color=always "${1:-HEAD}^" "${1:-HEAD}"; } \
    | $PAGER -r; }; f"

  map = "!f() { echo 'Entering /'; git $@; git submodule foreach git $@; }; f"

  graph = log --graph --all --format=format:\
'%C(dim yellow)%h\
%C(dim red) %G?%C(reset)\
%C(dim green) %aN\
%C(cyan) (%ar)%C(reset)\
%C(green)%d%C(reset)\
%n\
%C(white)%s'

  heatmap = "!f() { git log --name-status --pretty=format: | sed '/^$/d' | cut --fields=2- | sort | uniq --count | sort --numeric-sort --reverse | head ; }; f"


  uncommit = reset --soft HEAD^

  shallow-clone = clone --depth=1
  shallow-pull = "!f() { git fetch --depth 1; git reset --hard "origin/$(git rev-parse --abbrev-ref HEAD)"; git clean -dfx; }; f"
  unshallow = pull --unshallow
