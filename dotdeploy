#!/bin/sh

# dotdeploy - configurable dotfile and directory management
#
# Running this script looks for all *.deploy files in PWD,
# and sources them. Consequently, those need sh compliant
# syntax and definitions distinct from the script's.
#
# Example Usage:
#   ./dotdeploy conffiles   # where example.deploy is in .
#
# Example conf:
#   # in file: example.deploy
#   conffiles=('conf_home') # defines a compound target
#                           #  of sequential subtargets
#   conf_home=(       # begin target definition
#     . ~             # defines relative base source and base target for actions
#     d bin           # mkdir ~/bin
#     f .bash_history # touch ~/.bash_history
#     @ . .bashrc     # ln -s ././.bashrc ~/.bashrc
#   )                 # end target definition

### hardcoded conf

verbose=1


### setup

if [ "$verbose" = 1 ] ; then
    alias vecho='echo \>'
else
    alias vecho='true '
fi

alias errcho='>&2 echo !> '


### load user conf

vecho "looking for .deploy files..."

for conf in $PWD/*.deploy; do
    vecho "  found: $(basename $conf)"
    source $conf
done


### setup functions

# $1 -> target base dir
# $2 -> directory to create
action_mkdir () {
    vecho "    mkdir: $1/$2"
    mkdir -p "$1/$2"
}

# $1 -> target base dir
# $2 -> file to create
action_mkfile () {
    vecho "    touch: $1/$2"
    touch "$1/$2"
}

# $1 -> source base dir
# $2 -> target base dir
# $3 -> source directory for file, rel. to $1
# $4 -> target file, rel. to $2
action_symlink () {
    vecho "    symln: $2/$4 -> $1/$3/$(basename $4)"
    ln -s "$1/$3/$(basename $4)" "$2/$4"
}

# $1 -> source base dir
# $2 -> target base dir
# $3 -> array of commands, arguments and $3
handle_actions () {
    vecho '    processing directives...'
    source_base_dir=$(cd "$1"; pwd)
    target_base_dir=$(cd "$2"; pwd)
    shift 2
    while [ ! $# -eq 0 ] ; do
	case "$1" in
	    d)
		action_mkdir "$target_base_dir" "$2"
		shift
		;;
	    f)
		action_mkfile "$target_base_dir" "$2"
		shift
		;;
	    @)
                action_symlink "$source_base_dir" "$target_base_dir" "$2" "$3"
	        shift 2	    
	        ;;
	    *)
		errcho "illegal directive: $2"
		;;
	esac
	shift
    done    
}

# read a target
# 1 - target name
handle_target () {
    if [ "${!1}" = '@' ] ; then
        vecho "  compound: $1 (destructuring...)"
        target_array="\${${1}[@]:1}"
        for target in $(eval echo "$target_array"); do
            handle_target "$target"
        done
    else
        vecho "  target: $1";
	arg_array="${1}[@]"
	handle_actions "${!arg_array}"
    fi
}

handle_targets () {
    vecho 'handling targets...'
    for target in "$@"; do
	handle_target "$target"
    done
}

handle_targets "$@"

exit 0
